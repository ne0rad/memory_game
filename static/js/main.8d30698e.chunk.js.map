{"version":3,"sources":["components/Card.js","components/Gameboard.js","components/Menu.js","App.js","index.js"],"names":["Card","string","id","name","handleCardClick","className","onClick","charAt","toUpperCase","slice","src","alt","Gameboard","updateScore","updateLevel","useState","pokemon","setPokemon","allPokemon","setAllPokemon","correct","setCorrect","loading","setLoading","generateRandomPokemon","howMany","randomPokemon","length","random","Math","floor","includes","push","index","indexOf","tempCorrect","splice","tempPokemon","array","temporaryValue","randomIndex","currentIndex","shuffle","useEffect","fetch","then","res","json","data","results","map","pokemonName","Menu","score","bestScore","level","App","setScore","setBestScore","setLevel","cardGlow","win","element","item","document","getElementById","classList","add","setTimeout","remove","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8d30698e.chunk.js","sourcesContent":["function Card({ id, name, handleCardClick }) {\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    return (\n        <div className=\"card\" id={id} onClick={() => handleCardClick(id)}>\n            <div className=\"card-title\">{capitalizeFirstLetter(name)}</div>\n            <img className=\"card-image\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt={name} />\n            <div className=\"card-footer\"></div>\n        </div>\n    )\n}\n\nexport default Card;\n","import { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\nfunction Gameboard({ updateScore, updateLevel }) {\n    const [pokemon, setPokemon] = useState([]);\n    const [allPokemon, setAllPokemon] = useState([]);\n    const [correct, setCorrect] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetch('https://pokeapi.co/api/v2/pokemon/?limit=151')\n            .then(res => res.json())\n            .then(data => {\n                setAllPokemon(data.results);\n                setLoading(false);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (!loading) {\n            const randomPokemon = generateRandomPokemon(3);\n            setPokemon(randomPokemon);\n            setCorrect(randomPokemon);\n        }\n    }, [loading]);\n\n    function generateRandomPokemon(howMany) {\n        let randomPokemon = [];\n        while (randomPokemon.length < howMany) {\n            let random = Math.floor(Math.random() * 151 + 1);\n            if (!randomPokemon.includes(random)) {\n                randomPokemon.push(random);\n            }\n        }\n        return randomPokemon;\n    }\n\n    function handleCardClick(id) {\n        const index = correct.indexOf(id);\n        if (index !== -1) {\n            updateScore(true);\n            const tempCorrect = [...correct];\n            tempCorrect.splice(index, 1);\n            if (tempCorrect.length === 0) {\n                updateLevel(true);\n                const randomPokemon = generateRandomPokemon(pokemon.length + 1);\n                setPokemon(randomPokemon);\n                setCorrect(randomPokemon);\n            } else {\n                const tempPokemon = [...pokemon];\n                shuffle(tempPokemon);\n                setCorrect(tempCorrect);\n                setPokemon(tempPokemon);\n            }\n        } else {\n            updateScore(false);\n            updateLevel(false);\n            const randomPokemon = generateRandomPokemon(3);\n            setPokemon(randomPokemon);\n            setCorrect(randomPokemon);\n        }\n    }\n\n    function shuffle(array) {\n        let currentIndex = array.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n    return (\n        <div id=\"gameboard\">\n            {!loading && pokemon.map((id) => {\n                const pokemonName = allPokemon[id - 1].name;\n                return <Card key={id} id={id} name={pokemonName} handleCardClick={handleCardClick} />\n            })}\n        </div>\n    )\n}\n\nexport default Gameboard;\n","function Menu({ score, bestScore, level }) {\n    return (\n        <div id=\"menu\">\n            <div id=\"score\" className=\"menu-item\">\n                Score: {score}\n            </div>\n            <div id=\"level\" className=\"menu-item big\">\n            Level {level}\n            </div>\n            <div id=\"hiscore\" className=\"menu-item\">\n                Hi-Score: {bestScore}\n            </div>\n        </div>\n    )\n}\n\nexport default Menu;\n","import { useState } from 'react';\nimport Gameboard from './components/Gameboard';\nimport Menu from './components/Menu';\nimport './styles/App.css';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [level, setLevel] = useState(1);\n\n  function updateScore(win) {\n    // true/false to add score or reset\n    if (win) {\n      cardGlow(true, 'score');\n      if (score >= bestScore) {\n        cardGlow(true, 'hiscore');\n        setBestScore(score + 1);\n      }\n      setScore(score + 1);\n    } else {\n      cardGlow(false, 'score');\n      setScore(0);\n    }\n  }\n\n  function updateLevel(win) {\n    if (win) {\n      cardGlow(true, 'level');\n      setLevel(level + 1);\n    } else {\n      cardGlow(false, 'level');\n      setLevel(1);\n    }\n  }\n\n  function cardGlow(win, element) {\n    // Add glow to the card depending if right or wrong\n    let item = document.getElementById(element);\n\n    if (!win) {\n      item.classList.add('red-glow');\n\n      setTimeout(() => {\n        item.classList.remove('red-glow');\n      }, 500);\n    } else {\n      item.classList.add('green-glow');\n\n      setTimeout(() => {\n        item.classList.remove('green-glow');\n      }, 500);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Menu score={score} bestScore={bestScore} level={level} />\n      <Gameboard updateScore={updateScore} updateLevel={updateLevel} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}