{"version":3,"sources":["components/Card.js","components/Gameboard.js","components/Menu.js","App.js","index.js"],"names":["Card","string","id","name","handleCardClick","className","onClick","charAt","toUpperCase","slice","src","alt","Gameboard","updateScore","useState","pokemon","setPokemon","allPokemon","setAllPokemon","correct","setCorrect","loading","setLoading","Date","getTime","cacheTime","setCacheTime","generateRandomPokemon","randomPokemon","length","random","Math","floor","includes","push","currentTime","i","Image","updateCache","index","indexOf","cardGlow","tempCorrect","splice","tempPokemon","done","shuffle","addRandomPokemon","array","temporaryValue","randomIndex","currentIndex","color","score","document","getElementById","hiscore","title","classList","add","setTimeout","remove","useEffect","fetch","then","res","json","data","results","map","pokemonName","Menu","bestScore","App","setScore","setBestScore","isAdd","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d79fa532.chunk.js","sourcesContent":["function Card({ id, name, handleCardClick }) {\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    return (\n        <div className=\"card\" id={id} onClick={() => handleCardClick(id)}>\n            <div className=\"card-title\">{capitalizeFirstLetter(name)}</div>\n            <img className=\"card-image\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt={name} />\n            <div className=\"card-footer\"></div>\n        </div>\n    )\n}\n\nexport default Card;\n","import { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\nfunction Gameboard({ updateScore }) {\n    const [pokemon, setPokemon] = useState([]);\n    const [allPokemon, setAllPokemon] = useState([]);\n    const [correct, setCorrect] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [cacheTime, setCacheTime] = useState(new Date().getTime() / 1000 * 60)\n\n    useEffect(() => {\n        fetch('https://pokeapi.co/api/v2/pokemon/?limit=151')\n            .then(res => res.json())\n            .then(data => {\n                setAllPokemon(data.results);\n                setLoading(false);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (!loading) {\n            const randomPokemon = generateRandomPokemon();\n            setPokemon(randomPokemon);\n            setCorrect(randomPokemon);\n            for (let i = 1; i <= 151; i++) {\n                const img = new Image();\n                img.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${i}.png`;\n            }\n        }\n    }, [loading]);\n\n    function generateRandomPokemon() {\n        let randomPokemon = [];\n        while (randomPokemon.length < 3) {\n            let random = Math.floor(Math.random() * 151 + 1);\n            if (!randomPokemon.includes(random)) {\n                randomPokemon.push(random);\n            }\n        }\n        return randomPokemon;\n    }\n\n    function addRandomPokemon() {\n        const tempCorrect = [];\n        const tempPokemon = [...pokemon];\n        let done = false;\n        while (!done) {\n            let random = Math.floor(Math.random() * 151 + 1);\n            if (!tempPokemon.includes(random)) {\n                tempPokemon.push(random);\n                tempCorrect.push(random);\n                done = true;\n            }\n        }\n        shuffle(tempPokemon);\n        setPokemon(tempPokemon);\n        setCorrect(tempCorrect);\n    }\n\n    function updateCache() {\n        const currentTime = new Date().getTime() / 1000 * 60;\n        if(currentTime - cacheTime > 1000 * 60 * 9) {\n            for (let i = 1; i <= 151; i++) {\n                const img = new Image();\n                img.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${i}.png`;\n            }\n            setCacheTime(currentTime);\n        }\n    }\n\n    function handleCardClick(id) {\n        updateCache();\n        const index = correct.indexOf(id);\n        if (index !== -1) {\n            cardGlow(true);\n            updateScore(true);\n            const tempCorrect = [...correct];\n            tempCorrect.splice(index, 1);\n            if (tempCorrect.length === 0) {\n                addRandomPokemon();\n            } else {\n                const tempPokemon = [...pokemon];\n                shuffle(tempPokemon);\n                setCorrect(tempCorrect);\n                setPokemon(tempPokemon);\n            }\n        } else {\n            updateScore(false);\n            cardGlow(false);\n            const randomPokemon = generateRandomPokemon();\n            setPokemon(randomPokemon);\n            setCorrect(randomPokemon);\n        }\n    }\n\n    function shuffle(array) {\n        let currentIndex = array.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n\n    function cardGlow(color) {\n        // Add glow to the card depending if right or wrong\n        let score = document.getElementById('score');\n        let hiscore = document.getElementById('hiscore');\n        let title = document.getElementById('title');\n\n        if (!color) {\n            score.classList.add('red-glow');\n            hiscore.classList.add('red-glow');\n            title.classList.add('red-glow');\n\n            setTimeout(() => {\n                score.classList.remove('red-glow');\n                hiscore.classList.remove('red-glow');\n                title.classList.remove('red-glow');\n            }, 500);\n        } else {\n            score.classList.add('green-glow');\n            hiscore.classList.add('green-glow');\n            title.classList.add('green-glow');\n\n            setTimeout(() => {\n                score.classList.remove('green-glow');\n                hiscore.classList.remove('green-glow');\n                title.classList.remove('green-glow');\n            }, 500);\n        }\n    }\n\n    return (\n        <div id=\"gameboard\">\n            {!loading && pokemon.map((id) => {\n                const pokemonName = allPokemon[id - 1].name;\n                return <Card key={id} id={id} name={pokemonName} handleCardClick={handleCardClick} />\n            })}\n        </div>\n    )\n}\n\nexport default Gameboard;\n","function Menu({ score, bestScore }) {\n    return (\n        <div id=\"menu\">\n            <div id=\"score\" className=\"menu-item\">\n                Score: {score}\n            </div>\n            <div id=\"title\" className=\"menu-item big\">\n            Pokémon Memory Game\n            </div>\n            <div id=\"hiscore\" className=\"menu-item\">\n                Hi-Score: {bestScore}\n            </div>\n        </div>\n    )\n}\n\nexport default Menu;\n","import { useState } from 'react';\nimport Gameboard from './components/Gameboard';\nimport Menu from './components/Menu';\nimport './styles/App.css';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n\n  function updateScore(isAdd) {\n    // true/false to add score or reset\n    if(isAdd) {\n      if(score >= bestScore) {\n        setBestScore(score + 1);\n      }\n      setScore(score + 1);\n    } else {\n      setScore(0);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Menu score={score} bestScore={bestScore}/>\n      <Gameboard updateScore={updateScore}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}