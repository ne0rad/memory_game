{"version":3,"sources":["components/Card.js","components/Gameboard.js","components/Menu.js","App.js","index.js"],"names":["Card","string","id","name","handleCardClick","className","onClick","charAt","toUpperCase","slice","src","alt","Gameboard","updateScore","useState","pokemon","setPokemon","allPokemon","setAllPokemon","correct","setCorrect","loading","setLoading","generateRandomPokemon","randomPokemon","length","random","Math","floor","includes","push","index","indexOf","cardGlow","setTimeout","tempCorrect","splice","tempPokemon","done","shuffle","addRandomPokemon","array","temporaryValue","randomIndex","currentIndex","color","card","document","getElementById","removeGlow","classList","remove","removeEventListener","add","addEventListener","useEffect","fetch","then","res","json","data","results","i","Image","map","pokemonName","Menu","score","bestScore","App","setScore","setBestScore","isAdd","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c8d15463.chunk.js","sourcesContent":["function Card({ id, name, handleCardClick }) {\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    return (\n        <div className=\"card\" id={id} onClick={() => handleCardClick(id)}>\n            <div className=\"card-title\">{capitalizeFirstLetter(name)}</div>\n            <img className=\"card-image\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt={name} />\n            <div className=\"card-footer\"></div>\n        </div>\n    )\n}\n\nexport default Card;\n","import { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\n\nfunction Gameboard({ updateScore }) {\n    const [pokemon, setPokemon] = useState([]);\n    const [allPokemon, setAllPokemon] = useState([]);\n    const [correct, setCorrect] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        fetch('https://pokeapi.co/api/v2/pokemon/?limit=151')\n            .then(res => res.json())\n            .then(data => {\n                setAllPokemon(data.results);\n                setLoading(false);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (!loading) {\n            const randomPokemon = generateRandomPokemon();\n            setPokemon(randomPokemon);\n            setCorrect(randomPokemon);\n            for (let i = 1; i <= 151; i++) {\n                const img = new Image();\n                img.src = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${i}.png`;\n            }\n        }\n    }, [loading]);\n\n    function generateRandomPokemon() {\n        let randomPokemon = [];\n        while (randomPokemon.length < 4) {\n            let random = Math.floor(Math.random() * 151);\n            if (!randomPokemon.includes(random)) {\n                randomPokemon.push(random);\n            }\n        }\n        return randomPokemon;\n    }\n\n    function addRandomPokemon() {\n        const tempCorrect = [];\n        const tempPokemon = [...pokemon];\n        let done = false;\n        while (!done) {\n            let random = Math.floor(Math.random() * 151 + 1);\n            if (!tempPokemon.includes(random)) {\n                tempPokemon.push(random);\n                tempCorrect.push(random);\n                done = true;\n            }\n        }\n        shuffle(tempPokemon);\n        setPokemon(tempPokemon);\n        setCorrect(tempCorrect);\n    }\n\n    function handleCardClick(id) {\n        const index = correct.indexOf(id);\n        if (index !== -1) {\n            cardGlow(id, true);\n            updateScore(true);\n            setTimeout(() => {\n                const tempCorrect = [...correct];\n                tempCorrect.splice(index, 1);\n                if (tempCorrect.length === 0) {\n                    addRandomPokemon();\n                } else {\n                    const tempPokemon = [...pokemon];\n                    shuffle(tempPokemon);\n                    setCorrect(tempCorrect);\n                    setPokemon(tempPokemon);\n                }\n            }, 500)\n        } else {\n            updateScore(false);\n            cardGlow(id, false);\n            const randomPokemon = generateRandomPokemon();\n            setTimeout(() => {\n                setPokemon(randomPokemon);\n                setCorrect(randomPokemon);\n            }, 500)\n        }\n    }\n\n    function shuffle(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n\n    function cardGlow(id, color) {\n        // Add glow to the card depending if right or wrong\n        let card = document.getElementById(id);\n        if (!color) {\n            card.classList.add('red-glow');\n\n            // Remove glow on mouse leave\n            function removeGlow() {\n                card.classList.remove('red-glow');\n                card.removeEventListener('mouseleave', removeGlow);\n            }\n            card.addEventListener('mouseleave', removeGlow);\n        } else {\n            card.classList.add('green-glow');\n\n            // Remove glow on mouse leave\n            function removeGlow() {\n                card.classList.remove('green-glow');\n                card.removeEventListener('mouseleave', removeGlow);\n            }\n            card.addEventListener('mouseleave', removeGlow);\n        }\n    }\n\n    return (\n        <div id=\"gameboard\">\n            {!loading && pokemon.map((id) => {\n                const pokemonName = allPokemon[id - 1].name;\n                return <Card key={id} id={id} name={pokemonName} handleCardClick={handleCardClick} />\n            })}\n        </div>\n    )\n}\n\nexport default Gameboard;\n","function Menu({ score, bestScore }) {\n    return (\n        <div id=\"menu\">\n            <div className=\"menu-item\">\n                Score: {score}\n            </div>\n            <div className=\"menu-item big\">\n            Pok√©mon Memory Game\n            </div>\n            <div className=\"menu-item\">\n                Hi-Score: {bestScore}\n            </div>\n        </div>\n    )\n}\n\nexport default Menu;\n","import { useState } from 'react';\nimport Gameboard from './components/Gameboard';\nimport Menu from './components/Menu';\nimport './styles/App.css';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n\n  function updateScore(isAdd) {\n    // true/false to add score or reset\n    if(isAdd) {\n      if(score >= bestScore) {\n        setBestScore(score + 1);\n      }\n      setScore(score + 1);\n    } else {\n      setScore(0);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Menu score={score} bestScore={bestScore}/>\n      <Gameboard updateScore={updateScore}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}